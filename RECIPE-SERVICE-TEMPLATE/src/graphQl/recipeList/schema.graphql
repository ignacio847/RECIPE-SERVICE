input recipeListInput {
  recipeId:String!
  name:String!
  image:String!
  description: String!
  ingredients: [ingredientItemInput]!
  steps: [stepInput]!
  typeOfDish: String!
  difficulty: String!
  typeOfDiet: String!
  portions: Float!
  time: Int!
  numberOfStart:Float!
}

type Mutation{
    addRecipeToList(recipe:recipeListInput!):recipeErrorMessage!
    deleteRecipeFromList(id:String!):recipeErrorMessage!
}

type Query{
    getRecipeFromList:getRecipesByUserMessage!
    showRecipeDetailsFromList(id:String!):recipeDetailsMessage!
    existRecipeInList(id:String!):recipeErrorMessage!
}

type Recipe {
  _id: ID!
  nickName: String!
  name: String!
  image: String!
  description: String!
}

type FilteredRecipesResponse {
  success: Boolean!
  recipes: [Recipe]
  message: String
}

enum FilterType {
  NAME
  USERNAME
  TYPE
  WITH_INGREDIENTS
  WITHOUT_INGREDIENTS
}

enum OrderByField {
  name
  date
  nickname
}

enum OrderDirection {
  asc
  desc
}

type Query {
  filterRecipes(
    filterType: FilterType!
    searchText: String!
    orderBy: OrderByField
    direction: OrderDirection
  ): FilteredRecipesResponse!
}
